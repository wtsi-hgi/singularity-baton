#!/usr/bin/env bash

# Singularity containerised baton wrapper script
# Christopher Harrison <ch12@sanger.ac.uk>

set -euo pipefail

stderr() {
  local message="$*"

  [[ -t 2 ]] && message="$(tput setaf 1)${message}$(tput sgr0)"
  >&2 echo "${message}"
}

## Bootstrap

declare WORK_DIR="$(dirname "$(readlink -f "$0")")"

declare SINGULARITY
if ! SINGULARITY="$(command -v singularity)"; then
  stderr "Singularity not found!"
  exit 1
fi

declare JQ
if ! JQ="$(command -v jq)"; then
  stderr "jq not found!"
  exit 1
fi

declare IMAGE_EXT="simg"
[[ "$("${SINGULARITY}" --version)" =~ ^3\. ]] && IMAGE_EXT="sif"

declare IMAGE
if ! IMAGE="$(command -v "baton.${IMAGE_EXT}")"; then
  stderr "baton image not found in PATH; checking for local copy..."

  IMAGE="${WORK_DIR}/baton.${IMAGE_EXT}"
  if ! [[ -e "${IMAGE}" ]]; then
    stderr "Local baton image not found; building..."
    "${SINGULARITY}" build "${IMAGE}" "${WORK_DIR}/baton.def"
  fi
fi

declare IRODS_ENVIRONMENT_FILE="${IRODS_ENVIRONMENT_FILE-${HOME}/.irods/irods_environment.json}"
if ! [[ -e "${IRODS_ENVIRONMENT_FILE}" ]]; then
  stderr "iRODS environment configuration not found!"
  exit 1
fi

to_mount() {
  (
    # iRODS environment configuration
    # FIXME Does this need to be bound to the container's HOME?
    echo "${IRODS_ENVIRONMENT_FILE}"

    # iRODS configuration dependencies
    "${JQ}" -r --argjson keys '[
      "irods_authentication_file",
      "irods_ssl_ca_certificate_file",
      "irods_plugin_home"
    ]' 'to_entries | map(select(.key == $keys[])) | .[].value' "${IRODS_ENVIRONMENT_FILE}"

    # Kerberos configuration, if required
    if [[ "$("${JQ}" -r '.irods_authentication_scheme == "KRB"' "${IRODS_ENVIRONMENT_FILE}")" == "true" ]]; then
      echo "/etc/krb5.conf"
    fi
  ) \
  | sort \
  | uniq \
  | paste -sd,
}

## Entrypoint

main() {
  local app="${1-}"
  local mounts="$(to_mount)"
  local -a run_args=("--containall")

  if ( "${SINGULARITY}" apps "${IMAGE}" | grep -qx -- "${app}" ); then
      # The first argument corresponds to an app within the image
      run_args+=("--app" "${app}")
      shift

      # Look for --file arguments to add to the list of mounts
      local this
      local last="foo"
      for this in "$@"; do
        [[ "${last}" == "--file" ]] && mounts="${mounts},${this}"
        last="${this}"
      done
  fi

  # Add bind mounts
  run_args+=("--bind" "${mounts}")

  "${SINGULARITY}" run "${run_args[@]}" "${IMAGE}" "$@"
}

main "$@"
